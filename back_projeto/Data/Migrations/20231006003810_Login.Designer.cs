// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231006003810_Login")]
    partial class Login
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Bairro")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("Bairro");

                    b.Property<int>("Cep")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Cep");

                    b.Property<string>("Cidade")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("Cidade");

                    b.Property<string>("Complemento")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("Complemento");

                    b.Property<int>("InstitutoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("Logradouro");

                    b.Property<int>("NumeroCasa")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NumeroCasa");

                    b.Property<int>("PontoDoacaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoluntariadoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InstitutoId")
                        .IsUnique();

                    b.HasIndex("PontoDoacaoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VoluntariadoId");

                    b.ToTable("Enderecos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Instituto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Perfil")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Institutos");
                });

            modelBuilder.Entity("Domain.Entities.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("InstitutoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenhaHash")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InstitutoId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("Domain.Entities.MaterialDoacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InstitutoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PontoDoacaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InstitutoId");

                    b.HasIndex("PontoDoacaoId");

                    b.ToTable("MaterialDoacaos");
                });

            modelBuilder.Entity("Domain.Entities.PontoDoacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InstitutoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MateriasAceito")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeLocal")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstitutoId");

                    b.ToTable("PontoDoacaos");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("CPF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Nome");

                    b.Property<int>("Perfil")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenhaHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("SobreNome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("SobreNome");

                    b.Property<string>("Telefone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Voluntariado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("TEXT")
                        .HasColumnName("Descricao");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.ToTable("Voluntariados", (string)null);
                });

            modelBuilder.Entity("VoluntariadoUsuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoluntariadoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UsuarioId", "VoluntariadoId");

                    b.HasIndex("VoluntariadoId");

                    b.ToTable("VoluntariadoUsuarios", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.HasOne("Domain.Entities.Instituto", "Instituto")
                        .WithOne("Endereco")
                        .HasForeignKey("Domain.Entities.Endereco", "InstitutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PontoDoacao", "PontoDoacao")
                        .WithOne("Endereco")
                        .HasForeignKey("Domain.Entities.Endereco", "PontoDoacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany("Enderecos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Voluntariado", "Voluntariado")
                        .WithMany()
                        .HasForeignKey("VoluntariadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instituto");

                    b.Navigation("PontoDoacao");

                    b.Navigation("Usuario");

                    b.Navigation("Voluntariado");
                });

            modelBuilder.Entity("Domain.Entities.Login", b =>
                {
                    b.HasOne("Domain.Entities.Instituto", "Instituto")
                        .WithMany()
                        .HasForeignKey("InstitutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithOne("Login")
                        .HasForeignKey("Domain.Entities.Login", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instituto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.MaterialDoacao", b =>
                {
                    b.HasOne("Domain.Entities.Instituto", "Instituto")
                        .WithMany("MateriasDoacao")
                        .HasForeignKey("InstitutoId");

                    b.HasOne("Domain.Entities.PontoDoacao", "PontoDoacao")
                        .WithMany()
                        .HasForeignKey("PontoDoacaoId");

                    b.Navigation("Instituto");

                    b.Navigation("PontoDoacao");
                });

            modelBuilder.Entity("Domain.Entities.PontoDoacao", b =>
                {
                    b.HasOne("Domain.Entities.Instituto", "Instituto")
                        .WithMany()
                        .HasForeignKey("InstitutoId");

                    b.Navigation("Instituto");
                });

            modelBuilder.Entity("Domain.Entities.Voluntariado", b =>
                {
                    b.HasOne("Domain.Entities.Instituto", "Instituto")
                        .WithMany("Voluntariados")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.Services.VoluntariadoBeneficio", "Beneficios", b1 =>
                        {
                            b1.Property<string>("Beneficio")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Beneficio");

                            b1.Property<int>("VoluntariadoId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Beneficio");

                            b1.HasIndex("VoluntariadoId");

                            b1.ToTable("VoluntariadoBeneficios", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("VoluntariadoId");
                        });

                    b.OwnsMany("Domain.Services.VoluntariadoResponsabilidade", "Responsabilidade", b1 =>
                        {
                            b1.Property<string>("Responsabilidade")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Responsabilidade");

                            b1.Property<int>("VoluntariadoId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Responsabilidade");

                            b1.HasIndex("VoluntariadoId");

                            b1.ToTable("VoluntariadoResponsabilidades", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("VoluntariadoId");
                        });

                    b.Navigation("Beneficios");

                    b.Navigation("Instituto");

                    b.Navigation("Responsabilidade");
                });

            modelBuilder.Entity("VoluntariadoUsuario", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VoluntariadoUsuario_Usuario_UsuarioId");

                    b.HasOne("Domain.Entities.Voluntariado", null)
                        .WithMany()
                        .HasForeignKey("VoluntariadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VoluntariadoUsuario_Voluntariado_VoluntariadoId");
                });

            modelBuilder.Entity("Domain.Entities.Instituto", b =>
                {
                    b.Navigation("Endereco");

                    b.Navigation("MateriasDoacao");

                    b.Navigation("Voluntariados");
                });

            modelBuilder.Entity("Domain.Entities.PontoDoacao", b =>
                {
                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Enderecos");

                    b.Navigation("Login");
                });
#pragma warning restore 612, 618
        }
    }
}
